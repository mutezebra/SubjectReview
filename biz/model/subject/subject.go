// Code generated by thriftgo (0.3.17). DO NOT EDIT.

package subject

import (
	"context"
	"fmt"

	"github.com/apache/thrift/lib/go/thrift"

	"github.com/mutezebra/subject-review/biz/model/base"
)

type Subject struct {
	ID          *int64  `thrift:"ID,1,optional" form:"id" json:"id,omitempty"`
	Name        *string `thrift:"Name,2,optional" form:"name" json:"name,omitempty"`
	Answer      *string `thrift:"Answer,3,optional" form:"answer" json:"answer,omitempty"`
	SubjectType *int16  `thrift:"SubjectType,4,optional" form:"subject_type" json:"subject_type,omitempty"`
	CreatorID   *int64  `thrift:"CreatorID,5,optional" form:"creator_id" json:"creator_id,omitempty"`
	CreatedAt   *int64  `thrift:"CreatedAt,6,optional" form:"created_at" json:"created_at,omitempty"`
}

func NewSubject() *Subject {
	return &Subject{}
}

func (p *Subject) InitDefault() {
}

var Subject_ID_DEFAULT int64

func (p *Subject) GetID() (v int64) {
	if !p.IsSetID() {
		return Subject_ID_DEFAULT
	}
	return *p.ID
}

var Subject_Name_DEFAULT string

func (p *Subject) GetName() (v string) {
	if !p.IsSetName() {
		return Subject_Name_DEFAULT
	}
	return *p.Name
}

var Subject_Answer_DEFAULT string

func (p *Subject) GetAnswer() (v string) {
	if !p.IsSetAnswer() {
		return Subject_Answer_DEFAULT
	}
	return *p.Answer
}

var Subject_SubjectType_DEFAULT int16

func (p *Subject) GetSubjectType() (v int16) {
	if !p.IsSetSubjectType() {
		return Subject_SubjectType_DEFAULT
	}
	return *p.SubjectType
}

var Subject_CreatorID_DEFAULT int64

func (p *Subject) GetCreatorID() (v int64) {
	if !p.IsSetCreatorID() {
		return Subject_CreatorID_DEFAULT
	}
	return *p.CreatorID
}

var Subject_CreatedAt_DEFAULT int64

func (p *Subject) GetCreatedAt() (v int64) {
	if !p.IsSetCreatedAt() {
		return Subject_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var fieldIDToName_Subject = map[int16]string{
	1: "ID",
	2: "Name",
	3: "Answer",
	4: "SubjectType",
	5: "CreatorID",
	6: "CreatedAt",
}

func (p *Subject) IsSetID() bool {
	return p.ID != nil
}

func (p *Subject) IsSetName() bool {
	return p.Name != nil
}

func (p *Subject) IsSetAnswer() bool {
	return p.Answer != nil
}

func (p *Subject) IsSetSubjectType() bool {
	return p.SubjectType != nil
}

func (p *Subject) IsSetCreatorID() bool {
	return p.CreatorID != nil
}

func (p *Subject) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *Subject) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Subject[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Subject) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *Subject) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *Subject) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Answer = _field
	return nil
}
func (p *Subject) ReadField4(iprot thrift.TProtocol) error {

	var _field *int16
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SubjectType = _field
	return nil
}
func (p *Subject) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatorID = _field
	return nil
}
func (p *Subject) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedAt = _field
	return nil
}

func (p *Subject) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Subject"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Subject) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Subject) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Subject) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnswer() {
		if err = oprot.WriteFieldBegin("Answer", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Answer); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Subject) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubjectType() {
		if err = oprot.WriteFieldBegin("SubjectType", thrift.I16, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.SubjectType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Subject) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatorID() {
		if err = oprot.WriteFieldBegin("CreatorID", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CreatorID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Subject) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("CreatedAt", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Subject) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Subject(%+v)", *p)

}

type BaseSubject struct {
	ID          *int64  `thrift:"ID,1,optional" form:"id" json:"id,omitempty"`
	Name        *string `thrift:"Name,2,optional" form:"name" json:"name,omitempty"`
	Answer      *string `thrift:"Answer,3,optional" form:"answer" json:"answer,omitempty"`
	SubjectType *int16  `thrift:"SubjectType,4,optional" form:"subject_type" json:"subject_type,omitempty"`
}

func NewBaseSubject() *BaseSubject {
	return &BaseSubject{}
}

func (p *BaseSubject) InitDefault() {
}

var BaseSubject_ID_DEFAULT int64

func (p *BaseSubject) GetID() (v int64) {
	if !p.IsSetID() {
		return BaseSubject_ID_DEFAULT
	}
	return *p.ID
}

var BaseSubject_Name_DEFAULT string

func (p *BaseSubject) GetName() (v string) {
	if !p.IsSetName() {
		return BaseSubject_Name_DEFAULT
	}
	return *p.Name
}

var BaseSubject_Answer_DEFAULT string

func (p *BaseSubject) GetAnswer() (v string) {
	if !p.IsSetAnswer() {
		return BaseSubject_Answer_DEFAULT
	}
	return *p.Answer
}

var BaseSubject_SubjectType_DEFAULT int16

func (p *BaseSubject) GetSubjectType() (v int16) {
	if !p.IsSetSubjectType() {
		return BaseSubject_SubjectType_DEFAULT
	}
	return *p.SubjectType
}

var fieldIDToName_BaseSubject = map[int16]string{
	1: "ID",
	2: "Name",
	3: "Answer",
	4: "SubjectType",
}

func (p *BaseSubject) IsSetID() bool {
	return p.ID != nil
}

func (p *BaseSubject) IsSetName() bool {
	return p.Name != nil
}

func (p *BaseSubject) IsSetAnswer() bool {
	return p.Answer != nil
}

func (p *BaseSubject) IsSetSubjectType() bool {
	return p.SubjectType != nil
}

func (p *BaseSubject) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BaseSubject[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BaseSubject) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *BaseSubject) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *BaseSubject) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Answer = _field
	return nil
}
func (p *BaseSubject) ReadField4(iprot thrift.TProtocol) error {

	var _field *int16
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SubjectType = _field
	return nil
}

func (p *BaseSubject) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BaseSubject"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BaseSubject) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BaseSubject) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BaseSubject) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnswer() {
		if err = oprot.WriteFieldBegin("Answer", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Answer); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BaseSubject) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubjectType() {
		if err = oprot.WriteFieldBegin("SubjectType", thrift.I16, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.SubjectType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BaseSubject) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseSubject(%+v)", *p)

}

type UserWithSubject struct {
	UserID       *int64 `thrift:"UserID,1,optional" form:"user_id" json:"user_id,omitempty"`
	SubjectID    *int64 `thrift:"SubjectID,2,optional" form:"subject_id" json:"subject_id,omitempty"`
	SubjectType  *int16 `thrift:"SubjectType,3,optional" form:"subject_type" json:"subject_type,omitempty"`
	Phase        *int16 `thrift:"Phase,4,optional" form:"phase" json:"phase,omitempty"`
	LearnTimes   *int16 `thrift:"LearnTimes,5,optional" form:"learn_times" json:"learn_times,omitempty"`
	LastReviewAt *int64 `thrift:"LastReviewAt,6,optional" form:"last_review_at" json:"last_review_at,omitempty"`
}

func NewUserWithSubject() *UserWithSubject {
	return &UserWithSubject{}
}

func (p *UserWithSubject) InitDefault() {
}

var UserWithSubject_UserID_DEFAULT int64

func (p *UserWithSubject) GetUserID() (v int64) {
	if !p.IsSetUserID() {
		return UserWithSubject_UserID_DEFAULT
	}
	return *p.UserID
}

var UserWithSubject_SubjectID_DEFAULT int64

func (p *UserWithSubject) GetSubjectID() (v int64) {
	if !p.IsSetSubjectID() {
		return UserWithSubject_SubjectID_DEFAULT
	}
	return *p.SubjectID
}

var UserWithSubject_SubjectType_DEFAULT int16

func (p *UserWithSubject) GetSubjectType() (v int16) {
	if !p.IsSetSubjectType() {
		return UserWithSubject_SubjectType_DEFAULT
	}
	return *p.SubjectType
}

var UserWithSubject_Phase_DEFAULT int16

func (p *UserWithSubject) GetPhase() (v int16) {
	if !p.IsSetPhase() {
		return UserWithSubject_Phase_DEFAULT
	}
	return *p.Phase
}

var UserWithSubject_LearnTimes_DEFAULT int16

func (p *UserWithSubject) GetLearnTimes() (v int16) {
	if !p.IsSetLearnTimes() {
		return UserWithSubject_LearnTimes_DEFAULT
	}
	return *p.LearnTimes
}

var UserWithSubject_LastReviewAt_DEFAULT int64

func (p *UserWithSubject) GetLastReviewAt() (v int64) {
	if !p.IsSetLastReviewAt() {
		return UserWithSubject_LastReviewAt_DEFAULT
	}
	return *p.LastReviewAt
}

var fieldIDToName_UserWithSubject = map[int16]string{
	1: "UserID",
	2: "SubjectID",
	3: "SubjectType",
	4: "Phase",
	5: "LearnTimes",
	6: "LastReviewAt",
}

func (p *UserWithSubject) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *UserWithSubject) IsSetSubjectID() bool {
	return p.SubjectID != nil
}

func (p *UserWithSubject) IsSetSubjectType() bool {
	return p.SubjectType != nil
}

func (p *UserWithSubject) IsSetPhase() bool {
	return p.Phase != nil
}

func (p *UserWithSubject) IsSetLearnTimes() bool {
	return p.LearnTimes != nil
}

func (p *UserWithSubject) IsSetLastReviewAt() bool {
	return p.LastReviewAt != nil
}

func (p *UserWithSubject) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserWithSubject[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserWithSubject) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserID = _field
	return nil
}
func (p *UserWithSubject) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SubjectID = _field
	return nil
}
func (p *UserWithSubject) ReadField3(iprot thrift.TProtocol) error {

	var _field *int16
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SubjectType = _field
	return nil
}
func (p *UserWithSubject) ReadField4(iprot thrift.TProtocol) error {

	var _field *int16
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Phase = _field
	return nil
}
func (p *UserWithSubject) ReadField5(iprot thrift.TProtocol) error {

	var _field *int16
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LearnTimes = _field
	return nil
}
func (p *UserWithSubject) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LastReviewAt = _field
	return nil
}

func (p *UserWithSubject) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UserWithSubject"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserWithSubject) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err = oprot.WriteFieldBegin("UserID", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UserID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UserWithSubject) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubjectID() {
		if err = oprot.WriteFieldBegin("SubjectID", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.SubjectID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UserWithSubject) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubjectType() {
		if err = oprot.WriteFieldBegin("SubjectType", thrift.I16, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.SubjectType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UserWithSubject) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPhase() {
		if err = oprot.WriteFieldBegin("Phase", thrift.I16, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.Phase); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UserWithSubject) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLearnTimes() {
		if err = oprot.WriteFieldBegin("LearnTimes", thrift.I16, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.LearnTimes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UserWithSubject) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastReviewAt() {
		if err = oprot.WriteFieldBegin("LastReviewAt", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LastReviewAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UserWithSubject) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserWithSubject(%+v)", *p)

}

type SubjectRecord struct {
	ID           *int64  `thrift:"ID,1,optional" form:"id" json:"id,omitempty"`
	Name         *string `thrift:"Name,2,optional" form:"name" json:"name,omitempty"`
	Answer       *string `thrift:"Answer,3,optional" form:"answer" json:"answer,omitempty"`
	SubjectType  *int16  `thrift:"SubjectType,4,optional" form:"subject_type" json:"subject_type,omitempty"`
	Phase        *int16  `thrift:"Phase,5,optional" form:"phase" json:"phase,omitempty"`
	LearnTimes   *int16  `thrift:"LearnTimes,6,optional" form:"learn_times" json:"learn_times,omitempty"`
	LastReviewAt *int64  `thrift:"LastReviewAt,7,optional" form:"last_review_at" json:"last_review_at,omitempty"`
	NextReviewAt *int64  `thrift:"NextReviewAt,8,optional" form:"next_review_at" json:"next_review_at,omitempty"`
}

func NewSubjectRecord() *SubjectRecord {
	return &SubjectRecord{}
}

func (p *SubjectRecord) InitDefault() {
}

var SubjectRecord_ID_DEFAULT int64

func (p *SubjectRecord) GetID() (v int64) {
	if !p.IsSetID() {
		return SubjectRecord_ID_DEFAULT
	}
	return *p.ID
}

var SubjectRecord_Name_DEFAULT string

func (p *SubjectRecord) GetName() (v string) {
	if !p.IsSetName() {
		return SubjectRecord_Name_DEFAULT
	}
	return *p.Name
}

var SubjectRecord_Answer_DEFAULT string

func (p *SubjectRecord) GetAnswer() (v string) {
	if !p.IsSetAnswer() {
		return SubjectRecord_Answer_DEFAULT
	}
	return *p.Answer
}

var SubjectRecord_SubjectType_DEFAULT int16

func (p *SubjectRecord) GetSubjectType() (v int16) {
	if !p.IsSetSubjectType() {
		return SubjectRecord_SubjectType_DEFAULT
	}
	return *p.SubjectType
}

var SubjectRecord_Phase_DEFAULT int16

func (p *SubjectRecord) GetPhase() (v int16) {
	if !p.IsSetPhase() {
		return SubjectRecord_Phase_DEFAULT
	}
	return *p.Phase
}

var SubjectRecord_LearnTimes_DEFAULT int16

func (p *SubjectRecord) GetLearnTimes() (v int16) {
	if !p.IsSetLearnTimes() {
		return SubjectRecord_LearnTimes_DEFAULT
	}
	return *p.LearnTimes
}

var SubjectRecord_LastReviewAt_DEFAULT int64

func (p *SubjectRecord) GetLastReviewAt() (v int64) {
	if !p.IsSetLastReviewAt() {
		return SubjectRecord_LastReviewAt_DEFAULT
	}
	return *p.LastReviewAt
}

var SubjectRecord_NextReviewAt_DEFAULT int64

func (p *SubjectRecord) GetNextReviewAt() (v int64) {
	if !p.IsSetNextReviewAt() {
		return SubjectRecord_NextReviewAt_DEFAULT
	}
	return *p.NextReviewAt
}

var fieldIDToName_SubjectRecord = map[int16]string{
	1: "ID",
	2: "Name",
	3: "Answer",
	4: "SubjectType",
	5: "Phase",
	6: "LearnTimes",
	7: "LastReviewAt",
	8: "NextReviewAt",
}

func (p *SubjectRecord) IsSetID() bool {
	return p.ID != nil
}

func (p *SubjectRecord) IsSetName() bool {
	return p.Name != nil
}

func (p *SubjectRecord) IsSetAnswer() bool {
	return p.Answer != nil
}

func (p *SubjectRecord) IsSetSubjectType() bool {
	return p.SubjectType != nil
}

func (p *SubjectRecord) IsSetPhase() bool {
	return p.Phase != nil
}

func (p *SubjectRecord) IsSetLearnTimes() bool {
	return p.LearnTimes != nil
}

func (p *SubjectRecord) IsSetLastReviewAt() bool {
	return p.LastReviewAt != nil
}

func (p *SubjectRecord) IsSetNextReviewAt() bool {
	return p.NextReviewAt != nil
}

func (p *SubjectRecord) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubjectRecord[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubjectRecord) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *SubjectRecord) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *SubjectRecord) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Answer = _field
	return nil
}
func (p *SubjectRecord) ReadField4(iprot thrift.TProtocol) error {

	var _field *int16
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SubjectType = _field
	return nil
}
func (p *SubjectRecord) ReadField5(iprot thrift.TProtocol) error {

	var _field *int16
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Phase = _field
	return nil
}
func (p *SubjectRecord) ReadField6(iprot thrift.TProtocol) error {

	var _field *int16
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LearnTimes = _field
	return nil
}
func (p *SubjectRecord) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LastReviewAt = _field
	return nil
}
func (p *SubjectRecord) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextReviewAt = _field
	return nil
}

func (p *SubjectRecord) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubjectRecord"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubjectRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SubjectRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SubjectRecord) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnswer() {
		if err = oprot.WriteFieldBegin("Answer", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Answer); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SubjectRecord) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubjectType() {
		if err = oprot.WriteFieldBegin("SubjectType", thrift.I16, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.SubjectType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *SubjectRecord) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPhase() {
		if err = oprot.WriteFieldBegin("Phase", thrift.I16, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.Phase); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *SubjectRecord) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLearnTimes() {
		if err = oprot.WriteFieldBegin("LearnTimes", thrift.I16, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.LearnTimes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *SubjectRecord) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastReviewAt() {
		if err = oprot.WriteFieldBegin("LastReviewAt", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LastReviewAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *SubjectRecord) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextReviewAt() {
		if err = oprot.WriteFieldBegin("NextReviewAt", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.NextReviewAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *SubjectRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubjectRecord(%+v)", *p)

}

type SubjectRecordResp struct {
	ID           *int64  `thrift:"ID,1,optional" form:"id" json:"id,omitempty"`
	Name         *string `thrift:"Name,2,optional" form:"name" json:"name,omitempty"`
	Answer       *string `thrift:"Answer,3,optional" form:"answer" json:"answer,omitempty"`
	SubjectType  *int16  `thrift:"SubjectType,4,optional" form:"subject_type" json:"subject_type,omitempty"`
	Phase        *int16  `thrift:"Phase,5,optional" form:"phase" json:"phase,omitempty"`
	LearnTimes   *int16  `thrift:"LearnTimes,6,optional" form:"learn_times" json:"learn_times,omitempty"`
	LastReviewAt *string `thrift:"LastReviewAt,7,optional" form:"last_review_at" json:"last_review_at,omitempty"`
	NextReviewAt *string `thrift:"NextReviewAt,8,optional" form:"next_review_at" json:"next_review_at,omitempty"`
}

func NewSubjectRecordResp() *SubjectRecordResp {
	return &SubjectRecordResp{}
}

func (p *SubjectRecordResp) InitDefault() {
}

var SubjectRecordResp_ID_DEFAULT int64

func (p *SubjectRecordResp) GetID() (v int64) {
	if !p.IsSetID() {
		return SubjectRecordResp_ID_DEFAULT
	}
	return *p.ID
}

var SubjectRecordResp_Name_DEFAULT string

func (p *SubjectRecordResp) GetName() (v string) {
	if !p.IsSetName() {
		return SubjectRecordResp_Name_DEFAULT
	}
	return *p.Name
}

var SubjectRecordResp_Answer_DEFAULT string

func (p *SubjectRecordResp) GetAnswer() (v string) {
	if !p.IsSetAnswer() {
		return SubjectRecordResp_Answer_DEFAULT
	}
	return *p.Answer
}

var SubjectRecordResp_SubjectType_DEFAULT int16

func (p *SubjectRecordResp) GetSubjectType() (v int16) {
	if !p.IsSetSubjectType() {
		return SubjectRecordResp_SubjectType_DEFAULT
	}
	return *p.SubjectType
}

var SubjectRecordResp_Phase_DEFAULT int16

func (p *SubjectRecordResp) GetPhase() (v int16) {
	if !p.IsSetPhase() {
		return SubjectRecordResp_Phase_DEFAULT
	}
	return *p.Phase
}

var SubjectRecordResp_LearnTimes_DEFAULT int16

func (p *SubjectRecordResp) GetLearnTimes() (v int16) {
	if !p.IsSetLearnTimes() {
		return SubjectRecordResp_LearnTimes_DEFAULT
	}
	return *p.LearnTimes
}

var SubjectRecordResp_LastReviewAt_DEFAULT string

func (p *SubjectRecordResp) GetLastReviewAt() (v string) {
	if !p.IsSetLastReviewAt() {
		return SubjectRecordResp_LastReviewAt_DEFAULT
	}
	return *p.LastReviewAt
}

var SubjectRecordResp_NextReviewAt_DEFAULT string

func (p *SubjectRecordResp) GetNextReviewAt() (v string) {
	if !p.IsSetNextReviewAt() {
		return SubjectRecordResp_NextReviewAt_DEFAULT
	}
	return *p.NextReviewAt
}

var fieldIDToName_SubjectRecordResp = map[int16]string{
	1: "ID",
	2: "Name",
	3: "Answer",
	4: "SubjectType",
	5: "Phase",
	6: "LearnTimes",
	7: "LastReviewAt",
	8: "NextReviewAt",
}

func (p *SubjectRecordResp) IsSetID() bool {
	return p.ID != nil
}

func (p *SubjectRecordResp) IsSetName() bool {
	return p.Name != nil
}

func (p *SubjectRecordResp) IsSetAnswer() bool {
	return p.Answer != nil
}

func (p *SubjectRecordResp) IsSetSubjectType() bool {
	return p.SubjectType != nil
}

func (p *SubjectRecordResp) IsSetPhase() bool {
	return p.Phase != nil
}

func (p *SubjectRecordResp) IsSetLearnTimes() bool {
	return p.LearnTimes != nil
}

func (p *SubjectRecordResp) IsSetLastReviewAt() bool {
	return p.LastReviewAt != nil
}

func (p *SubjectRecordResp) IsSetNextReviewAt() bool {
	return p.NextReviewAt != nil
}

func (p *SubjectRecordResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubjectRecordResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubjectRecordResp) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *SubjectRecordResp) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *SubjectRecordResp) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Answer = _field
	return nil
}
func (p *SubjectRecordResp) ReadField4(iprot thrift.TProtocol) error {

	var _field *int16
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SubjectType = _field
	return nil
}
func (p *SubjectRecordResp) ReadField5(iprot thrift.TProtocol) error {

	var _field *int16
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Phase = _field
	return nil
}
func (p *SubjectRecordResp) ReadField6(iprot thrift.TProtocol) error {

	var _field *int16
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LearnTimes = _field
	return nil
}
func (p *SubjectRecordResp) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LastReviewAt = _field
	return nil
}
func (p *SubjectRecordResp) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextReviewAt = _field
	return nil
}

func (p *SubjectRecordResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubjectRecordResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubjectRecordResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SubjectRecordResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SubjectRecordResp) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnswer() {
		if err = oprot.WriteFieldBegin("Answer", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Answer); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SubjectRecordResp) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubjectType() {
		if err = oprot.WriteFieldBegin("SubjectType", thrift.I16, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.SubjectType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *SubjectRecordResp) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPhase() {
		if err = oprot.WriteFieldBegin("Phase", thrift.I16, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.Phase); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *SubjectRecordResp) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLearnTimes() {
		if err = oprot.WriteFieldBegin("LearnTimes", thrift.I16, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.LearnTimes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *SubjectRecordResp) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastReviewAt() {
		if err = oprot.WriteFieldBegin("LastReviewAt", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LastReviewAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *SubjectRecordResp) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextReviewAt() {
		if err = oprot.WriteFieldBegin("NextReviewAt", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextReviewAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *SubjectRecordResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubjectRecordResp(%+v)", *p)

}

type Remind struct {
	UserID    *int64 `thrift:"UserID,1,optional" form:"user_id" json:"user_id,omitempty"`
	SubjectID *int64 `thrift:"SubjectID,2,optional" form:"subject_id" json:"subject_id,omitempty"`
	Remind    *int64 `thrift:"Remind,3,optional" form:"remind" json:"remind,omitempty"`
}

func NewRemind() *Remind {
	return &Remind{}
}

func (p *Remind) InitDefault() {
}

var Remind_UserID_DEFAULT int64

func (p *Remind) GetUserID() (v int64) {
	if !p.IsSetUserID() {
		return Remind_UserID_DEFAULT
	}
	return *p.UserID
}

var Remind_SubjectID_DEFAULT int64

func (p *Remind) GetSubjectID() (v int64) {
	if !p.IsSetSubjectID() {
		return Remind_SubjectID_DEFAULT
	}
	return *p.SubjectID
}

var Remind_Remind_DEFAULT int64

func (p *Remind) GetRemind() (v int64) {
	if !p.IsSetRemind() {
		return Remind_Remind_DEFAULT
	}
	return *p.Remind
}

var fieldIDToName_Remind = map[int16]string{
	1: "UserID",
	2: "SubjectID",
	3: "Remind",
}

func (p *Remind) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *Remind) IsSetSubjectID() bool {
	return p.SubjectID != nil
}

func (p *Remind) IsSetRemind() bool {
	return p.Remind != nil
}

func (p *Remind) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Remind[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Remind) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserID = _field
	return nil
}
func (p *Remind) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SubjectID = _field
	return nil
}
func (p *Remind) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Remind = _field
	return nil
}

func (p *Remind) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Remind"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Remind) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err = oprot.WriteFieldBegin("UserID", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UserID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Remind) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubjectID() {
		if err = oprot.WriteFieldBegin("SubjectID", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.SubjectID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Remind) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemind() {
		if err = oprot.WriteFieldBegin("Remind", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Remind); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Remind) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Remind(%+v)", *p)

}

type GetSubjectsReq struct {
	UserID      *int64 `thrift:"UserID,1,optional" form:"UserID" json:"UserID,omitempty" query:"UserID"`
	SubjectType *int16 `thrift:"SubjectType,2,optional" json:"SubjectType,omitempty" path:"subject-type" query:"subject-type"`
	Pages       *int64 `thrift:"Pages,3,optional" form:"pages" json:"Pages,omitempty"`
	Size        *int64 `thrift:"Size,4,optional" form:"size" json:"Size,omitempty"`
}

func NewGetSubjectsReq() *GetSubjectsReq {
	return &GetSubjectsReq{}
}

func (p *GetSubjectsReq) InitDefault() {
}

var GetSubjectsReq_UserID_DEFAULT int64

func (p *GetSubjectsReq) GetUserID() (v int64) {
	if !p.IsSetUserID() {
		return GetSubjectsReq_UserID_DEFAULT
	}
	return *p.UserID
}

var GetSubjectsReq_SubjectType_DEFAULT int16

func (p *GetSubjectsReq) GetSubjectType() (v int16) {
	if !p.IsSetSubjectType() {
		return GetSubjectsReq_SubjectType_DEFAULT
	}
	return *p.SubjectType
}

var GetSubjectsReq_Pages_DEFAULT int64

func (p *GetSubjectsReq) GetPages() (v int64) {
	if !p.IsSetPages() {
		return GetSubjectsReq_Pages_DEFAULT
	}
	return *p.Pages
}

var GetSubjectsReq_Size_DEFAULT int64

func (p *GetSubjectsReq) GetSize() (v int64) {
	if !p.IsSetSize() {
		return GetSubjectsReq_Size_DEFAULT
	}
	return *p.Size
}

var fieldIDToName_GetSubjectsReq = map[int16]string{
	1: "UserID",
	2: "SubjectType",
	3: "Pages",
	4: "Size",
}

func (p *GetSubjectsReq) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *GetSubjectsReq) IsSetSubjectType() bool {
	return p.SubjectType != nil
}

func (p *GetSubjectsReq) IsSetPages() bool {
	return p.Pages != nil
}

func (p *GetSubjectsReq) IsSetSize() bool {
	return p.Size != nil
}

func (p *GetSubjectsReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetSubjectsReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetSubjectsReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserID = _field
	return nil
}
func (p *GetSubjectsReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int16
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SubjectType = _field
	return nil
}
func (p *GetSubjectsReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Pages = _field
	return nil
}
func (p *GetSubjectsReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Size = _field
	return nil
}

func (p *GetSubjectsReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSubjectsReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetSubjectsReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err = oprot.WriteFieldBegin("UserID", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UserID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetSubjectsReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubjectType() {
		if err = oprot.WriteFieldBegin("SubjectType", thrift.I16, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.SubjectType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetSubjectsReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPages() {
		if err = oprot.WriteFieldBegin("Pages", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Pages); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetSubjectsReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSize() {
		if err = oprot.WriteFieldBegin("Size", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Size); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetSubjectsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSubjectsReq(%+v)", *p)

}

type GetSubjectsResp struct {
	Base     *base.Base     `thrift:"Base,1,optional" form:"base" json:"base,omitempty"`
	Total    *int64         `thrift:"Total,2,optional" form:"total" json:"total,omitempty"`
	Subjects []*BaseSubject `thrift:"Subjects,3,optional" form:"subjects" json:"subjects,omitempty"`
}

func NewGetSubjectsResp() *GetSubjectsResp {
	return &GetSubjectsResp{}
}

func (p *GetSubjectsResp) InitDefault() {
}

var GetSubjectsResp_Base_DEFAULT *base.Base

func (p *GetSubjectsResp) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetSubjectsResp_Base_DEFAULT
	}
	return p.Base
}

var GetSubjectsResp_Total_DEFAULT int64

func (p *GetSubjectsResp) GetTotal() (v int64) {
	if !p.IsSetTotal() {
		return GetSubjectsResp_Total_DEFAULT
	}
	return *p.Total
}

var GetSubjectsResp_Subjects_DEFAULT []*BaseSubject

func (p *GetSubjectsResp) GetSubjects() (v []*BaseSubject) {
	if !p.IsSetSubjects() {
		return GetSubjectsResp_Subjects_DEFAULT
	}
	return p.Subjects
}

var fieldIDToName_GetSubjectsResp = map[int16]string{
	1: "Base",
	2: "Total",
	3: "Subjects",
}

func (p *GetSubjectsResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetSubjectsResp) IsSetTotal() bool {
	return p.Total != nil
}

func (p *GetSubjectsResp) IsSetSubjects() bool {
	return p.Subjects != nil
}

func (p *GetSubjectsResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetSubjectsResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetSubjectsResp) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *GetSubjectsResp) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}
func (p *GetSubjectsResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*BaseSubject, 0, size)
	values := make([]BaseSubject, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Subjects = _field
	return nil
}

func (p *GetSubjectsResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSubjectsResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetSubjectsResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetSubjectsResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("Total", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetSubjectsResp) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubjects() {
		if err = oprot.WriteFieldBegin("Subjects", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Subjects)); err != nil {
			return err
		}
		for _, v := range p.Subjects {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetSubjectsResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSubjectsResp(%+v)", *p)

}

type AddForgetSubjectReq struct {
	UserID      *int64 `thrift:"UserID,1,optional" form:"UserID" json:"UserID,omitempty" query:"UserID"`
	SubjectID   *int64 `thrift:"SubjectID,2,optional" form:"subject_id" json:"SubjectID,omitempty"`
	SubjectType *int16 `thrift:"SubjectType,3,optional" form:"subject_type" json:"SubjectType,omitempty"`
}

func NewAddForgetSubjectReq() *AddForgetSubjectReq {
	return &AddForgetSubjectReq{}
}

func (p *AddForgetSubjectReq) InitDefault() {
}

var AddForgetSubjectReq_UserID_DEFAULT int64

func (p *AddForgetSubjectReq) GetUserID() (v int64) {
	if !p.IsSetUserID() {
		return AddForgetSubjectReq_UserID_DEFAULT
	}
	return *p.UserID
}

var AddForgetSubjectReq_SubjectID_DEFAULT int64

func (p *AddForgetSubjectReq) GetSubjectID() (v int64) {
	if !p.IsSetSubjectID() {
		return AddForgetSubjectReq_SubjectID_DEFAULT
	}
	return *p.SubjectID
}

var AddForgetSubjectReq_SubjectType_DEFAULT int16

func (p *AddForgetSubjectReq) GetSubjectType() (v int16) {
	if !p.IsSetSubjectType() {
		return AddForgetSubjectReq_SubjectType_DEFAULT
	}
	return *p.SubjectType
}

var fieldIDToName_AddForgetSubjectReq = map[int16]string{
	1: "UserID",
	2: "SubjectID",
	3: "SubjectType",
}

func (p *AddForgetSubjectReq) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *AddForgetSubjectReq) IsSetSubjectID() bool {
	return p.SubjectID != nil
}

func (p *AddForgetSubjectReq) IsSetSubjectType() bool {
	return p.SubjectType != nil
}

func (p *AddForgetSubjectReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddForgetSubjectReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AddForgetSubjectReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserID = _field
	return nil
}
func (p *AddForgetSubjectReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SubjectID = _field
	return nil
}
func (p *AddForgetSubjectReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *int16
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SubjectType = _field
	return nil
}

func (p *AddForgetSubjectReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddForgetSubjectReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddForgetSubjectReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err = oprot.WriteFieldBegin("UserID", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UserID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AddForgetSubjectReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubjectID() {
		if err = oprot.WriteFieldBegin("SubjectID", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.SubjectID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AddForgetSubjectReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubjectType() {
		if err = oprot.WriteFieldBegin("SubjectType", thrift.I16, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.SubjectType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AddForgetSubjectReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddForgetSubjectReq(%+v)", *p)

}

type AddForgetSubjectResp struct {
	Base *base.Base `thrift:"Base,1,optional" form:"base" json:"base,omitempty"`
}

func NewAddForgetSubjectResp() *AddForgetSubjectResp {
	return &AddForgetSubjectResp{}
}

func (p *AddForgetSubjectResp) InitDefault() {
}

var AddForgetSubjectResp_Base_DEFAULT *base.Base

func (p *AddForgetSubjectResp) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return AddForgetSubjectResp_Base_DEFAULT
	}
	return p.Base
}

var fieldIDToName_AddForgetSubjectResp = map[int16]string{
	1: "Base",
}

func (p *AddForgetSubjectResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddForgetSubjectResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddForgetSubjectResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AddForgetSubjectResp) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *AddForgetSubjectResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddForgetSubjectResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddForgetSubjectResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AddForgetSubjectResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddForgetSubjectResp(%+v)", *p)

}

type AddSuccessSubjectReq struct {
	UserID      *int64 `thrift:"UserID,1,optional" form:"UserID" json:"UserID,omitempty" query:"UserID"`
	SubjectID   *int64 `thrift:"SubjectID,2,optional" form:"subject_id" json:"SubjectID,omitempty"`
	SubjectType *int16 `thrift:"SubjectType,3,optional" form:"subject_type" json:"SubjectType,omitempty"`
}

func NewAddSuccessSubjectReq() *AddSuccessSubjectReq {
	return &AddSuccessSubjectReq{}
}

func (p *AddSuccessSubjectReq) InitDefault() {
}

var AddSuccessSubjectReq_UserID_DEFAULT int64

func (p *AddSuccessSubjectReq) GetUserID() (v int64) {
	if !p.IsSetUserID() {
		return AddSuccessSubjectReq_UserID_DEFAULT
	}
	return *p.UserID
}

var AddSuccessSubjectReq_SubjectID_DEFAULT int64

func (p *AddSuccessSubjectReq) GetSubjectID() (v int64) {
	if !p.IsSetSubjectID() {
		return AddSuccessSubjectReq_SubjectID_DEFAULT
	}
	return *p.SubjectID
}

var AddSuccessSubjectReq_SubjectType_DEFAULT int16

func (p *AddSuccessSubjectReq) GetSubjectType() (v int16) {
	if !p.IsSetSubjectType() {
		return AddSuccessSubjectReq_SubjectType_DEFAULT
	}
	return *p.SubjectType
}

var fieldIDToName_AddSuccessSubjectReq = map[int16]string{
	1: "UserID",
	2: "SubjectID",
	3: "SubjectType",
}

func (p *AddSuccessSubjectReq) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *AddSuccessSubjectReq) IsSetSubjectID() bool {
	return p.SubjectID != nil
}

func (p *AddSuccessSubjectReq) IsSetSubjectType() bool {
	return p.SubjectType != nil
}

func (p *AddSuccessSubjectReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddSuccessSubjectReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AddSuccessSubjectReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserID = _field
	return nil
}
func (p *AddSuccessSubjectReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SubjectID = _field
	return nil
}
func (p *AddSuccessSubjectReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *int16
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SubjectType = _field
	return nil
}

func (p *AddSuccessSubjectReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddSuccessSubjectReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddSuccessSubjectReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err = oprot.WriteFieldBegin("UserID", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UserID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AddSuccessSubjectReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubjectID() {
		if err = oprot.WriteFieldBegin("SubjectID", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.SubjectID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AddSuccessSubjectReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubjectType() {
		if err = oprot.WriteFieldBegin("SubjectType", thrift.I16, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.SubjectType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AddSuccessSubjectReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddSuccessSubjectReq(%+v)", *p)

}

type AddSuccessSubjectResp struct {
	Base *base.Base `thrift:"Base,1,optional" form:"base" json:"base,omitempty"`
}

func NewAddSuccessSubjectResp() *AddSuccessSubjectResp {
	return &AddSuccessSubjectResp{}
}

func (p *AddSuccessSubjectResp) InitDefault() {
}

var AddSuccessSubjectResp_Base_DEFAULT *base.Base

func (p *AddSuccessSubjectResp) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return AddSuccessSubjectResp_Base_DEFAULT
	}
	return p.Base
}

var fieldIDToName_AddSuccessSubjectResp = map[int16]string{
	1: "Base",
}

func (p *AddSuccessSubjectResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddSuccessSubjectResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddSuccessSubjectResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AddSuccessSubjectResp) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *AddSuccessSubjectResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddSuccessSubjectResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddSuccessSubjectResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AddSuccessSubjectResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddSuccessSubjectResp(%+v)", *p)

}

type GetNeededReviewSubjectsReq struct {
	UserID *int64 `thrift:"UserID,1,optional" form:"UserID" json:"UserID,omitempty" query:"UserID"`
	Pages  *int64 `thrift:"pages,2,optional" form:"pages" json:"pages,omitempty"`
	Size   *int64 `thrift:"size,3,optional" form:"size" json:"size,omitempty"`
}

func NewGetNeededReviewSubjectsReq() *GetNeededReviewSubjectsReq {
	return &GetNeededReviewSubjectsReq{}
}

func (p *GetNeededReviewSubjectsReq) InitDefault() {
}

var GetNeededReviewSubjectsReq_UserID_DEFAULT int64

func (p *GetNeededReviewSubjectsReq) GetUserID() (v int64) {
	if !p.IsSetUserID() {
		return GetNeededReviewSubjectsReq_UserID_DEFAULT
	}
	return *p.UserID
}

var GetNeededReviewSubjectsReq_Pages_DEFAULT int64

func (p *GetNeededReviewSubjectsReq) GetPages() (v int64) {
	if !p.IsSetPages() {
		return GetNeededReviewSubjectsReq_Pages_DEFAULT
	}
	return *p.Pages
}

var GetNeededReviewSubjectsReq_Size_DEFAULT int64

func (p *GetNeededReviewSubjectsReq) GetSize() (v int64) {
	if !p.IsSetSize() {
		return GetNeededReviewSubjectsReq_Size_DEFAULT
	}
	return *p.Size
}

var fieldIDToName_GetNeededReviewSubjectsReq = map[int16]string{
	1: "UserID",
	2: "pages",
	3: "size",
}

func (p *GetNeededReviewSubjectsReq) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *GetNeededReviewSubjectsReq) IsSetPages() bool {
	return p.Pages != nil
}

func (p *GetNeededReviewSubjectsReq) IsSetSize() bool {
	return p.Size != nil
}

func (p *GetNeededReviewSubjectsReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetNeededReviewSubjectsReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetNeededReviewSubjectsReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserID = _field
	return nil
}
func (p *GetNeededReviewSubjectsReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Pages = _field
	return nil
}
func (p *GetNeededReviewSubjectsReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Size = _field
	return nil
}

func (p *GetNeededReviewSubjectsReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNeededReviewSubjectsReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetNeededReviewSubjectsReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err = oprot.WriteFieldBegin("UserID", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UserID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetNeededReviewSubjectsReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPages() {
		if err = oprot.WriteFieldBegin("pages", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Pages); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetNeededReviewSubjectsReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSize() {
		if err = oprot.WriteFieldBegin("size", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Size); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetNeededReviewSubjectsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNeededReviewSubjectsReq(%+v)", *p)

}

type GetNeededReviewSubjectsResp struct {
	Base     *base.Base           `thrift:"Base,1,optional" form:"base" json:"base,omitempty"`
	Total    *int64               `thrift:"Total,2,optional" form:"total" json:"total,omitempty"`
	Subjects []*SubjectRecordResp `thrift:"Subjects,3,optional" form:"subjects" json:"subjects,omitempty"`
}

func NewGetNeededReviewSubjectsResp() *GetNeededReviewSubjectsResp {
	return &GetNeededReviewSubjectsResp{}
}

func (p *GetNeededReviewSubjectsResp) InitDefault() {
}

var GetNeededReviewSubjectsResp_Base_DEFAULT *base.Base

func (p *GetNeededReviewSubjectsResp) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetNeededReviewSubjectsResp_Base_DEFAULT
	}
	return p.Base
}

var GetNeededReviewSubjectsResp_Total_DEFAULT int64

func (p *GetNeededReviewSubjectsResp) GetTotal() (v int64) {
	if !p.IsSetTotal() {
		return GetNeededReviewSubjectsResp_Total_DEFAULT
	}
	return *p.Total
}

var GetNeededReviewSubjectsResp_Subjects_DEFAULT []*SubjectRecordResp

func (p *GetNeededReviewSubjectsResp) GetSubjects() (v []*SubjectRecordResp) {
	if !p.IsSetSubjects() {
		return GetNeededReviewSubjectsResp_Subjects_DEFAULT
	}
	return p.Subjects
}

var fieldIDToName_GetNeededReviewSubjectsResp = map[int16]string{
	1: "Base",
	2: "Total",
	3: "Subjects",
}

func (p *GetNeededReviewSubjectsResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetNeededReviewSubjectsResp) IsSetTotal() bool {
	return p.Total != nil
}

func (p *GetNeededReviewSubjectsResp) IsSetSubjects() bool {
	return p.Subjects != nil
}

func (p *GetNeededReviewSubjectsResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetNeededReviewSubjectsResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetNeededReviewSubjectsResp) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *GetNeededReviewSubjectsResp) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}
func (p *GetNeededReviewSubjectsResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*SubjectRecordResp, 0, size)
	values := make([]SubjectRecordResp, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Subjects = _field
	return nil
}

func (p *GetNeededReviewSubjectsResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNeededReviewSubjectsResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetNeededReviewSubjectsResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetNeededReviewSubjectsResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("Total", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetNeededReviewSubjectsResp) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubjects() {
		if err = oprot.WriteFieldBegin("Subjects", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Subjects)); err != nil {
			return err
		}
		for _, v := range p.Subjects {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetNeededReviewSubjectsResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNeededReviewSubjectsResp(%+v)", *p)

}

type GetAnswerSubjectRecordReq struct {
	UserID *int64 `thrift:"UserID,1,optional" form:"UserID" json:"UserID,omitempty" query:"UserID"`
	Pages  *int64 `thrift:"pages,2,optional" form:"pages" json:"pages,omitempty"`
	Size   *int64 `thrift:"size,3,optional" form:"size" json:"size,omitempty"`
}

func NewGetAnswerSubjectRecordReq() *GetAnswerSubjectRecordReq {
	return &GetAnswerSubjectRecordReq{}
}

func (p *GetAnswerSubjectRecordReq) InitDefault() {
}

var GetAnswerSubjectRecordReq_UserID_DEFAULT int64

func (p *GetAnswerSubjectRecordReq) GetUserID() (v int64) {
	if !p.IsSetUserID() {
		return GetAnswerSubjectRecordReq_UserID_DEFAULT
	}
	return *p.UserID
}

var GetAnswerSubjectRecordReq_Pages_DEFAULT int64

func (p *GetAnswerSubjectRecordReq) GetPages() (v int64) {
	if !p.IsSetPages() {
		return GetAnswerSubjectRecordReq_Pages_DEFAULT
	}
	return *p.Pages
}

var GetAnswerSubjectRecordReq_Size_DEFAULT int64

func (p *GetAnswerSubjectRecordReq) GetSize() (v int64) {
	if !p.IsSetSize() {
		return GetAnswerSubjectRecordReq_Size_DEFAULT
	}
	return *p.Size
}

var fieldIDToName_GetAnswerSubjectRecordReq = map[int16]string{
	1: "UserID",
	2: "pages",
	3: "size",
}

func (p *GetAnswerSubjectRecordReq) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *GetAnswerSubjectRecordReq) IsSetPages() bool {
	return p.Pages != nil
}

func (p *GetAnswerSubjectRecordReq) IsSetSize() bool {
	return p.Size != nil
}

func (p *GetAnswerSubjectRecordReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetAnswerSubjectRecordReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetAnswerSubjectRecordReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserID = _field
	return nil
}
func (p *GetAnswerSubjectRecordReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Pages = _field
	return nil
}
func (p *GetAnswerSubjectRecordReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Size = _field
	return nil
}

func (p *GetAnswerSubjectRecordReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAnswerSubjectRecordReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetAnswerSubjectRecordReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err = oprot.WriteFieldBegin("UserID", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UserID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetAnswerSubjectRecordReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPages() {
		if err = oprot.WriteFieldBegin("pages", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Pages); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetAnswerSubjectRecordReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSize() {
		if err = oprot.WriteFieldBegin("size", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Size); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetAnswerSubjectRecordReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAnswerSubjectRecordReq(%+v)", *p)

}

type GetAnswerSubjectRecordResp struct {
	Base     *base.Base           `thrift:"Base,1,optional" form:"base" json:"base,omitempty"`
	Total    *int64               `thrift:"Total,2,optional" form:"total" json:"total,omitempty"`
	Subjects []*SubjectRecordResp `thrift:"Subjects,3,optional" form:"subjects" json:"subjects,omitempty"`
}

func NewGetAnswerSubjectRecordResp() *GetAnswerSubjectRecordResp {
	return &GetAnswerSubjectRecordResp{}
}

func (p *GetAnswerSubjectRecordResp) InitDefault() {
}

var GetAnswerSubjectRecordResp_Base_DEFAULT *base.Base

func (p *GetAnswerSubjectRecordResp) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetAnswerSubjectRecordResp_Base_DEFAULT
	}
	return p.Base
}

var GetAnswerSubjectRecordResp_Total_DEFAULT int64

func (p *GetAnswerSubjectRecordResp) GetTotal() (v int64) {
	if !p.IsSetTotal() {
		return GetAnswerSubjectRecordResp_Total_DEFAULT
	}
	return *p.Total
}

var GetAnswerSubjectRecordResp_Subjects_DEFAULT []*SubjectRecordResp

func (p *GetAnswerSubjectRecordResp) GetSubjects() (v []*SubjectRecordResp) {
	if !p.IsSetSubjects() {
		return GetAnswerSubjectRecordResp_Subjects_DEFAULT
	}
	return p.Subjects
}

var fieldIDToName_GetAnswerSubjectRecordResp = map[int16]string{
	1: "Base",
	2: "Total",
	3: "Subjects",
}

func (p *GetAnswerSubjectRecordResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetAnswerSubjectRecordResp) IsSetTotal() bool {
	return p.Total != nil
}

func (p *GetAnswerSubjectRecordResp) IsSetSubjects() bool {
	return p.Subjects != nil
}

func (p *GetAnswerSubjectRecordResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetAnswerSubjectRecordResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetAnswerSubjectRecordResp) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}
func (p *GetAnswerSubjectRecordResp) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}
func (p *GetAnswerSubjectRecordResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*SubjectRecordResp, 0, size)
	values := make([]SubjectRecordResp, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Subjects = _field
	return nil
}

func (p *GetAnswerSubjectRecordResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAnswerSubjectRecordResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetAnswerSubjectRecordResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetAnswerSubjectRecordResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("Total", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetAnswerSubjectRecordResp) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubjects() {
		if err = oprot.WriteFieldBegin("Subjects", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Subjects)); err != nil {
			return err
		}
		for _, v := range p.Subjects {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetAnswerSubjectRecordResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAnswerSubjectRecordResp(%+v)", *p)

}

type AddNewSubjectReq struct {
	UserID      *int64  `thrift:"UserID,1,optional" form:"UserID" json:"UserID,omitempty" query:"UserID"`
	SubjectType *int16  `thrift:"SubjectType,2,optional" form:"subject_type" json:"SubjectType,omitempty"`
	Name        *string `thrift:"Name,3,optional" form:"name" json:"Name,omitempty"`
	Answer      *string `thrift:"Answer,4,optional" form:"answer" json:"Answer,omitempty"`
}

func NewAddNewSubjectReq() *AddNewSubjectReq {
	return &AddNewSubjectReq{}
}

func (p *AddNewSubjectReq) InitDefault() {
}

var AddNewSubjectReq_UserID_DEFAULT int64

func (p *AddNewSubjectReq) GetUserID() (v int64) {
	if !p.IsSetUserID() {
		return AddNewSubjectReq_UserID_DEFAULT
	}
	return *p.UserID
}

var AddNewSubjectReq_SubjectType_DEFAULT int16

func (p *AddNewSubjectReq) GetSubjectType() (v int16) {
	if !p.IsSetSubjectType() {
		return AddNewSubjectReq_SubjectType_DEFAULT
	}
	return *p.SubjectType
}

var AddNewSubjectReq_Name_DEFAULT string

func (p *AddNewSubjectReq) GetName() (v string) {
	if !p.IsSetName() {
		return AddNewSubjectReq_Name_DEFAULT
	}
	return *p.Name
}

var AddNewSubjectReq_Answer_DEFAULT string

func (p *AddNewSubjectReq) GetAnswer() (v string) {
	if !p.IsSetAnswer() {
		return AddNewSubjectReq_Answer_DEFAULT
	}
	return *p.Answer
}

var fieldIDToName_AddNewSubjectReq = map[int16]string{
	1: "UserID",
	2: "SubjectType",
	3: "Name",
	4: "Answer",
}

func (p *AddNewSubjectReq) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *AddNewSubjectReq) IsSetSubjectType() bool {
	return p.SubjectType != nil
}

func (p *AddNewSubjectReq) IsSetName() bool {
	return p.Name != nil
}

func (p *AddNewSubjectReq) IsSetAnswer() bool {
	return p.Answer != nil
}

func (p *AddNewSubjectReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddNewSubjectReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AddNewSubjectReq) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserID = _field
	return nil
}
func (p *AddNewSubjectReq) ReadField2(iprot thrift.TProtocol) error {

	var _field *int16
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SubjectType = _field
	return nil
}
func (p *AddNewSubjectReq) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *AddNewSubjectReq) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Answer = _field
	return nil
}

func (p *AddNewSubjectReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddNewSubjectReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddNewSubjectReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err = oprot.WriteFieldBegin("UserID", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UserID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AddNewSubjectReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubjectType() {
		if err = oprot.WriteFieldBegin("SubjectType", thrift.I16, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(*p.SubjectType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AddNewSubjectReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AddNewSubjectReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnswer() {
		if err = oprot.WriteFieldBegin("Answer", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Answer); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *AddNewSubjectReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddNewSubjectReq(%+v)", *p)

}

type AddNewSubjectResp struct {
	Base *base.Base `thrift:"Base,1,optional" form:"base" json:"base,omitempty"`
}

func NewAddNewSubjectResp() *AddNewSubjectResp {
	return &AddNewSubjectResp{}
}

func (p *AddNewSubjectResp) InitDefault() {
}

var AddNewSubjectResp_Base_DEFAULT *base.Base

func (p *AddNewSubjectResp) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return AddNewSubjectResp_Base_DEFAULT
	}
	return p.Base
}

var fieldIDToName_AddNewSubjectResp = map[int16]string{
	1: "Base",
}

func (p *AddNewSubjectResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddNewSubjectResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddNewSubjectResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AddNewSubjectResp) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *AddNewSubjectResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddNewSubjectResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddNewSubjectResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AddNewSubjectResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddNewSubjectResp(%+v)", *p)

}

type SubjectService interface {
	GetSubjects(ctx context.Context, req *GetSubjectsReq) (r *GetSubjectsResp, err error)

	AddForgetSubject(ctx context.Context, req *AddForgetSubjectReq) (r *AddForgetSubjectResp, err error)

	AddSuccessSubject(ctx context.Context, req *AddSuccessSubjectReq) (r *AddSuccessSubjectResp, err error)

	GetNeededReviewSubjects(ctx context.Context, req *GetNeededReviewSubjectsReq) (r *GetNeededReviewSubjectsResp, err error)

	GetAnswerSubjectRecord(ctx context.Context, req *GetAnswerSubjectRecordReq) (r *GetAnswerSubjectRecordResp, err error)

	AddNewSubject(ctx context.Context, req *AddNewSubjectReq) (r *AddNewSubjectResp, err error)
}

type SubjectServiceClient struct {
	c thrift.TClient
}

func NewSubjectServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SubjectServiceClient {
	return &SubjectServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewSubjectServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SubjectServiceClient {
	return &SubjectServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewSubjectServiceClient(c thrift.TClient) *SubjectServiceClient {
	return &SubjectServiceClient{
		c: c,
	}
}

func (p *SubjectServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *SubjectServiceClient) GetSubjects(ctx context.Context, req *GetSubjectsReq) (r *GetSubjectsResp, err error) {
	var _args SubjectServiceGetSubjectsArgs
	_args.Req = req
	var _result SubjectServiceGetSubjectsResult
	if err = p.Client_().Call(ctx, "GetSubjects", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SubjectServiceClient) AddForgetSubject(ctx context.Context, req *AddForgetSubjectReq) (r *AddForgetSubjectResp, err error) {
	var _args SubjectServiceAddForgetSubjectArgs
	_args.Req = req
	var _result SubjectServiceAddForgetSubjectResult
	if err = p.Client_().Call(ctx, "AddForgetSubject", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SubjectServiceClient) AddSuccessSubject(ctx context.Context, req *AddSuccessSubjectReq) (r *AddSuccessSubjectResp, err error) {
	var _args SubjectServiceAddSuccessSubjectArgs
	_args.Req = req
	var _result SubjectServiceAddSuccessSubjectResult
	if err = p.Client_().Call(ctx, "AddSuccessSubject", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SubjectServiceClient) GetNeededReviewSubjects(ctx context.Context, req *GetNeededReviewSubjectsReq) (r *GetNeededReviewSubjectsResp, err error) {
	var _args SubjectServiceGetNeededReviewSubjectsArgs
	_args.Req = req
	var _result SubjectServiceGetNeededReviewSubjectsResult
	if err = p.Client_().Call(ctx, "GetNeededReviewSubjects", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SubjectServiceClient) GetAnswerSubjectRecord(ctx context.Context, req *GetAnswerSubjectRecordReq) (r *GetAnswerSubjectRecordResp, err error) {
	var _args SubjectServiceGetAnswerSubjectRecordArgs
	_args.Req = req
	var _result SubjectServiceGetAnswerSubjectRecordResult
	if err = p.Client_().Call(ctx, "GetAnswerSubjectRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SubjectServiceClient) AddNewSubject(ctx context.Context, req *AddNewSubjectReq) (r *AddNewSubjectResp, err error) {
	var _args SubjectServiceAddNewSubjectArgs
	_args.Req = req
	var _result SubjectServiceAddNewSubjectResult
	if err = p.Client_().Call(ctx, "AddNewSubject", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type SubjectServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      SubjectService
}

func (p *SubjectServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *SubjectServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *SubjectServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewSubjectServiceProcessor(handler SubjectService) *SubjectServiceProcessor {
	self := &SubjectServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetSubjects", &subjectServiceProcessorGetSubjects{handler: handler})
	self.AddToProcessorMap("AddForgetSubject", &subjectServiceProcessorAddForgetSubject{handler: handler})
	self.AddToProcessorMap("AddSuccessSubject", &subjectServiceProcessorAddSuccessSubject{handler: handler})
	self.AddToProcessorMap("GetNeededReviewSubjects", &subjectServiceProcessorGetNeededReviewSubjects{handler: handler})
	self.AddToProcessorMap("GetAnswerSubjectRecord", &subjectServiceProcessorGetAnswerSubjectRecord{handler: handler})
	self.AddToProcessorMap("AddNewSubject", &subjectServiceProcessorAddNewSubject{handler: handler})
	return self
}
func (p *SubjectServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type subjectServiceProcessorGetSubjects struct {
	handler SubjectService
}

func (p *subjectServiceProcessorGetSubjects) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SubjectServiceGetSubjectsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSubjects", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SubjectServiceGetSubjectsResult{}
	var retval *GetSubjectsResp
	if retval, err2 = p.handler.GetSubjects(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSubjects: "+err2.Error())
		oprot.WriteMessageBegin("GetSubjects", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSubjects", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type subjectServiceProcessorAddForgetSubject struct {
	handler SubjectService
}

func (p *subjectServiceProcessorAddForgetSubject) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SubjectServiceAddForgetSubjectArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddForgetSubject", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SubjectServiceAddForgetSubjectResult{}
	var retval *AddForgetSubjectResp
	if retval, err2 = p.handler.AddForgetSubject(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddForgetSubject: "+err2.Error())
		oprot.WriteMessageBegin("AddForgetSubject", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddForgetSubject", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type subjectServiceProcessorAddSuccessSubject struct {
	handler SubjectService
}

func (p *subjectServiceProcessorAddSuccessSubject) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SubjectServiceAddSuccessSubjectArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddSuccessSubject", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SubjectServiceAddSuccessSubjectResult{}
	var retval *AddSuccessSubjectResp
	if retval, err2 = p.handler.AddSuccessSubject(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddSuccessSubject: "+err2.Error())
		oprot.WriteMessageBegin("AddSuccessSubject", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddSuccessSubject", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type subjectServiceProcessorGetNeededReviewSubjects struct {
	handler SubjectService
}

func (p *subjectServiceProcessorGetNeededReviewSubjects) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SubjectServiceGetNeededReviewSubjectsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetNeededReviewSubjects", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SubjectServiceGetNeededReviewSubjectsResult{}
	var retval *GetNeededReviewSubjectsResp
	if retval, err2 = p.handler.GetNeededReviewSubjects(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNeededReviewSubjects: "+err2.Error())
		oprot.WriteMessageBegin("GetNeededReviewSubjects", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetNeededReviewSubjects", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type subjectServiceProcessorGetAnswerSubjectRecord struct {
	handler SubjectService
}

func (p *subjectServiceProcessorGetAnswerSubjectRecord) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SubjectServiceGetAnswerSubjectRecordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetAnswerSubjectRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SubjectServiceGetAnswerSubjectRecordResult{}
	var retval *GetAnswerSubjectRecordResp
	if retval, err2 = p.handler.GetAnswerSubjectRecord(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAnswerSubjectRecord: "+err2.Error())
		oprot.WriteMessageBegin("GetAnswerSubjectRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetAnswerSubjectRecord", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type subjectServiceProcessorAddNewSubject struct {
	handler SubjectService
}

func (p *subjectServiceProcessorAddNewSubject) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SubjectServiceAddNewSubjectArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddNewSubject", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SubjectServiceAddNewSubjectResult{}
	var retval *AddNewSubjectResp
	if retval, err2 = p.handler.AddNewSubject(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddNewSubject: "+err2.Error())
		oprot.WriteMessageBegin("AddNewSubject", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddNewSubject", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type SubjectServiceGetSubjectsArgs struct {
	Req *GetSubjectsReq `thrift:"req,1"`
}

func NewSubjectServiceGetSubjectsArgs() *SubjectServiceGetSubjectsArgs {
	return &SubjectServiceGetSubjectsArgs{}
}

func (p *SubjectServiceGetSubjectsArgs) InitDefault() {
}

var SubjectServiceGetSubjectsArgs_Req_DEFAULT *GetSubjectsReq

func (p *SubjectServiceGetSubjectsArgs) GetReq() (v *GetSubjectsReq) {
	if !p.IsSetReq() {
		return SubjectServiceGetSubjectsArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_SubjectServiceGetSubjectsArgs = map[int16]string{
	1: "req",
}

func (p *SubjectServiceGetSubjectsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SubjectServiceGetSubjectsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubjectServiceGetSubjectsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubjectServiceGetSubjectsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetSubjectsReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *SubjectServiceGetSubjectsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSubjects_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubjectServiceGetSubjectsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SubjectServiceGetSubjectsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubjectServiceGetSubjectsArgs(%+v)", *p)

}

type SubjectServiceGetSubjectsResult struct {
	Success *GetSubjectsResp `thrift:"success,0,optional"`
}

func NewSubjectServiceGetSubjectsResult() *SubjectServiceGetSubjectsResult {
	return &SubjectServiceGetSubjectsResult{}
}

func (p *SubjectServiceGetSubjectsResult) InitDefault() {
}

var SubjectServiceGetSubjectsResult_Success_DEFAULT *GetSubjectsResp

func (p *SubjectServiceGetSubjectsResult) GetSuccess() (v *GetSubjectsResp) {
	if !p.IsSetSuccess() {
		return SubjectServiceGetSubjectsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_SubjectServiceGetSubjectsResult = map[int16]string{
	0: "success",
}

func (p *SubjectServiceGetSubjectsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SubjectServiceGetSubjectsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubjectServiceGetSubjectsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubjectServiceGetSubjectsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetSubjectsResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SubjectServiceGetSubjectsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSubjects_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubjectServiceGetSubjectsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SubjectServiceGetSubjectsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubjectServiceGetSubjectsResult(%+v)", *p)

}

type SubjectServiceAddForgetSubjectArgs struct {
	Req *AddForgetSubjectReq `thrift:"req,1"`
}

func NewSubjectServiceAddForgetSubjectArgs() *SubjectServiceAddForgetSubjectArgs {
	return &SubjectServiceAddForgetSubjectArgs{}
}

func (p *SubjectServiceAddForgetSubjectArgs) InitDefault() {
}

var SubjectServiceAddForgetSubjectArgs_Req_DEFAULT *AddForgetSubjectReq

func (p *SubjectServiceAddForgetSubjectArgs) GetReq() (v *AddForgetSubjectReq) {
	if !p.IsSetReq() {
		return SubjectServiceAddForgetSubjectArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_SubjectServiceAddForgetSubjectArgs = map[int16]string{
	1: "req",
}

func (p *SubjectServiceAddForgetSubjectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SubjectServiceAddForgetSubjectArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubjectServiceAddForgetSubjectArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubjectServiceAddForgetSubjectArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewAddForgetSubjectReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *SubjectServiceAddForgetSubjectArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddForgetSubject_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubjectServiceAddForgetSubjectArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SubjectServiceAddForgetSubjectArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubjectServiceAddForgetSubjectArgs(%+v)", *p)

}

type SubjectServiceAddForgetSubjectResult struct {
	Success *AddForgetSubjectResp `thrift:"success,0,optional"`
}

func NewSubjectServiceAddForgetSubjectResult() *SubjectServiceAddForgetSubjectResult {
	return &SubjectServiceAddForgetSubjectResult{}
}

func (p *SubjectServiceAddForgetSubjectResult) InitDefault() {
}

var SubjectServiceAddForgetSubjectResult_Success_DEFAULT *AddForgetSubjectResp

func (p *SubjectServiceAddForgetSubjectResult) GetSuccess() (v *AddForgetSubjectResp) {
	if !p.IsSetSuccess() {
		return SubjectServiceAddForgetSubjectResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_SubjectServiceAddForgetSubjectResult = map[int16]string{
	0: "success",
}

func (p *SubjectServiceAddForgetSubjectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SubjectServiceAddForgetSubjectResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubjectServiceAddForgetSubjectResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubjectServiceAddForgetSubjectResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewAddForgetSubjectResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SubjectServiceAddForgetSubjectResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddForgetSubject_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubjectServiceAddForgetSubjectResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SubjectServiceAddForgetSubjectResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubjectServiceAddForgetSubjectResult(%+v)", *p)

}

type SubjectServiceAddSuccessSubjectArgs struct {
	Req *AddSuccessSubjectReq `thrift:"req,1"`
}

func NewSubjectServiceAddSuccessSubjectArgs() *SubjectServiceAddSuccessSubjectArgs {
	return &SubjectServiceAddSuccessSubjectArgs{}
}

func (p *SubjectServiceAddSuccessSubjectArgs) InitDefault() {
}

var SubjectServiceAddSuccessSubjectArgs_Req_DEFAULT *AddSuccessSubjectReq

func (p *SubjectServiceAddSuccessSubjectArgs) GetReq() (v *AddSuccessSubjectReq) {
	if !p.IsSetReq() {
		return SubjectServiceAddSuccessSubjectArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_SubjectServiceAddSuccessSubjectArgs = map[int16]string{
	1: "req",
}

func (p *SubjectServiceAddSuccessSubjectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SubjectServiceAddSuccessSubjectArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubjectServiceAddSuccessSubjectArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubjectServiceAddSuccessSubjectArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewAddSuccessSubjectReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *SubjectServiceAddSuccessSubjectArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddSuccessSubject_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubjectServiceAddSuccessSubjectArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SubjectServiceAddSuccessSubjectArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubjectServiceAddSuccessSubjectArgs(%+v)", *p)

}

type SubjectServiceAddSuccessSubjectResult struct {
	Success *AddSuccessSubjectResp `thrift:"success,0,optional"`
}

func NewSubjectServiceAddSuccessSubjectResult() *SubjectServiceAddSuccessSubjectResult {
	return &SubjectServiceAddSuccessSubjectResult{}
}

func (p *SubjectServiceAddSuccessSubjectResult) InitDefault() {
}

var SubjectServiceAddSuccessSubjectResult_Success_DEFAULT *AddSuccessSubjectResp

func (p *SubjectServiceAddSuccessSubjectResult) GetSuccess() (v *AddSuccessSubjectResp) {
	if !p.IsSetSuccess() {
		return SubjectServiceAddSuccessSubjectResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_SubjectServiceAddSuccessSubjectResult = map[int16]string{
	0: "success",
}

func (p *SubjectServiceAddSuccessSubjectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SubjectServiceAddSuccessSubjectResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubjectServiceAddSuccessSubjectResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubjectServiceAddSuccessSubjectResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewAddSuccessSubjectResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SubjectServiceAddSuccessSubjectResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddSuccessSubject_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubjectServiceAddSuccessSubjectResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SubjectServiceAddSuccessSubjectResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubjectServiceAddSuccessSubjectResult(%+v)", *p)

}

type SubjectServiceGetNeededReviewSubjectsArgs struct {
	Req *GetNeededReviewSubjectsReq `thrift:"req,1"`
}

func NewSubjectServiceGetNeededReviewSubjectsArgs() *SubjectServiceGetNeededReviewSubjectsArgs {
	return &SubjectServiceGetNeededReviewSubjectsArgs{}
}

func (p *SubjectServiceGetNeededReviewSubjectsArgs) InitDefault() {
}

var SubjectServiceGetNeededReviewSubjectsArgs_Req_DEFAULT *GetNeededReviewSubjectsReq

func (p *SubjectServiceGetNeededReviewSubjectsArgs) GetReq() (v *GetNeededReviewSubjectsReq) {
	if !p.IsSetReq() {
		return SubjectServiceGetNeededReviewSubjectsArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_SubjectServiceGetNeededReviewSubjectsArgs = map[int16]string{
	1: "req",
}

func (p *SubjectServiceGetNeededReviewSubjectsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SubjectServiceGetNeededReviewSubjectsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubjectServiceGetNeededReviewSubjectsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubjectServiceGetNeededReviewSubjectsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetNeededReviewSubjectsReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *SubjectServiceGetNeededReviewSubjectsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNeededReviewSubjects_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubjectServiceGetNeededReviewSubjectsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SubjectServiceGetNeededReviewSubjectsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubjectServiceGetNeededReviewSubjectsArgs(%+v)", *p)

}

type SubjectServiceGetNeededReviewSubjectsResult struct {
	Success *GetNeededReviewSubjectsResp `thrift:"success,0,optional"`
}

func NewSubjectServiceGetNeededReviewSubjectsResult() *SubjectServiceGetNeededReviewSubjectsResult {
	return &SubjectServiceGetNeededReviewSubjectsResult{}
}

func (p *SubjectServiceGetNeededReviewSubjectsResult) InitDefault() {
}

var SubjectServiceGetNeededReviewSubjectsResult_Success_DEFAULT *GetNeededReviewSubjectsResp

func (p *SubjectServiceGetNeededReviewSubjectsResult) GetSuccess() (v *GetNeededReviewSubjectsResp) {
	if !p.IsSetSuccess() {
		return SubjectServiceGetNeededReviewSubjectsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_SubjectServiceGetNeededReviewSubjectsResult = map[int16]string{
	0: "success",
}

func (p *SubjectServiceGetNeededReviewSubjectsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SubjectServiceGetNeededReviewSubjectsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubjectServiceGetNeededReviewSubjectsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubjectServiceGetNeededReviewSubjectsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetNeededReviewSubjectsResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SubjectServiceGetNeededReviewSubjectsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNeededReviewSubjects_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubjectServiceGetNeededReviewSubjectsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SubjectServiceGetNeededReviewSubjectsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubjectServiceGetNeededReviewSubjectsResult(%+v)", *p)

}

type SubjectServiceGetAnswerSubjectRecordArgs struct {
	Req *GetAnswerSubjectRecordReq `thrift:"req,1"`
}

func NewSubjectServiceGetAnswerSubjectRecordArgs() *SubjectServiceGetAnswerSubjectRecordArgs {
	return &SubjectServiceGetAnswerSubjectRecordArgs{}
}

func (p *SubjectServiceGetAnswerSubjectRecordArgs) InitDefault() {
}

var SubjectServiceGetAnswerSubjectRecordArgs_Req_DEFAULT *GetAnswerSubjectRecordReq

func (p *SubjectServiceGetAnswerSubjectRecordArgs) GetReq() (v *GetAnswerSubjectRecordReq) {
	if !p.IsSetReq() {
		return SubjectServiceGetAnswerSubjectRecordArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_SubjectServiceGetAnswerSubjectRecordArgs = map[int16]string{
	1: "req",
}

func (p *SubjectServiceGetAnswerSubjectRecordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SubjectServiceGetAnswerSubjectRecordArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubjectServiceGetAnswerSubjectRecordArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubjectServiceGetAnswerSubjectRecordArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetAnswerSubjectRecordReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *SubjectServiceGetAnswerSubjectRecordArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAnswerSubjectRecord_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubjectServiceGetAnswerSubjectRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SubjectServiceGetAnswerSubjectRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubjectServiceGetAnswerSubjectRecordArgs(%+v)", *p)

}

type SubjectServiceGetAnswerSubjectRecordResult struct {
	Success *GetAnswerSubjectRecordResp `thrift:"success,0,optional"`
}

func NewSubjectServiceGetAnswerSubjectRecordResult() *SubjectServiceGetAnswerSubjectRecordResult {
	return &SubjectServiceGetAnswerSubjectRecordResult{}
}

func (p *SubjectServiceGetAnswerSubjectRecordResult) InitDefault() {
}

var SubjectServiceGetAnswerSubjectRecordResult_Success_DEFAULT *GetAnswerSubjectRecordResp

func (p *SubjectServiceGetAnswerSubjectRecordResult) GetSuccess() (v *GetAnswerSubjectRecordResp) {
	if !p.IsSetSuccess() {
		return SubjectServiceGetAnswerSubjectRecordResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_SubjectServiceGetAnswerSubjectRecordResult = map[int16]string{
	0: "success",
}

func (p *SubjectServiceGetAnswerSubjectRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SubjectServiceGetAnswerSubjectRecordResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubjectServiceGetAnswerSubjectRecordResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubjectServiceGetAnswerSubjectRecordResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetAnswerSubjectRecordResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SubjectServiceGetAnswerSubjectRecordResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAnswerSubjectRecord_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubjectServiceGetAnswerSubjectRecordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SubjectServiceGetAnswerSubjectRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubjectServiceGetAnswerSubjectRecordResult(%+v)", *p)

}

type SubjectServiceAddNewSubjectArgs struct {
	Req *AddNewSubjectReq `thrift:"req,1"`
}

func NewSubjectServiceAddNewSubjectArgs() *SubjectServiceAddNewSubjectArgs {
	return &SubjectServiceAddNewSubjectArgs{}
}

func (p *SubjectServiceAddNewSubjectArgs) InitDefault() {
}

var SubjectServiceAddNewSubjectArgs_Req_DEFAULT *AddNewSubjectReq

func (p *SubjectServiceAddNewSubjectArgs) GetReq() (v *AddNewSubjectReq) {
	if !p.IsSetReq() {
		return SubjectServiceAddNewSubjectArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_SubjectServiceAddNewSubjectArgs = map[int16]string{
	1: "req",
}

func (p *SubjectServiceAddNewSubjectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SubjectServiceAddNewSubjectArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubjectServiceAddNewSubjectArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubjectServiceAddNewSubjectArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewAddNewSubjectReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *SubjectServiceAddNewSubjectArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddNewSubject_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubjectServiceAddNewSubjectArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SubjectServiceAddNewSubjectArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubjectServiceAddNewSubjectArgs(%+v)", *p)

}

type SubjectServiceAddNewSubjectResult struct {
	Success *AddNewSubjectResp `thrift:"success,0,optional"`
}

func NewSubjectServiceAddNewSubjectResult() *SubjectServiceAddNewSubjectResult {
	return &SubjectServiceAddNewSubjectResult{}
}

func (p *SubjectServiceAddNewSubjectResult) InitDefault() {
}

var SubjectServiceAddNewSubjectResult_Success_DEFAULT *AddNewSubjectResp

func (p *SubjectServiceAddNewSubjectResult) GetSuccess() (v *AddNewSubjectResp) {
	if !p.IsSetSuccess() {
		return SubjectServiceAddNewSubjectResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_SubjectServiceAddNewSubjectResult = map[int16]string{
	0: "success",
}

func (p *SubjectServiceAddNewSubjectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SubjectServiceAddNewSubjectResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubjectServiceAddNewSubjectResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubjectServiceAddNewSubjectResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewAddNewSubjectResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SubjectServiceAddNewSubjectResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddNewSubject_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubjectServiceAddNewSubjectResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SubjectServiceAddNewSubjectResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubjectServiceAddNewSubjectResult(%+v)", *p)

}
