// Code generated by hertz generator.

package user

import (
	"context"
	"io"

	"github.com/mutezebra/subject-review/app/user/usecase"
	"github.com/mutezebra/subject-review/pkg/constants"
	"github.com/mutezebra/subject-review/pkg/errno"
	"github.com/mutezebra/subject-review/pkg/pack"
	"github.com/mutezebra/subject-review/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	user "github.com/mutezebra/subject-review/biz/model/user"
)

// GetVerifyCode .
// @router /api/user/verify_code [GET]
func GetVerifyCode(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.GetVerifyCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	var resp *user.GetVerifyCodeResp
	resp, err = usecase.GetUsecase().GetVerifyCode(ctx, &req)
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetPasswordVerifyCode .
// @router /api/user/password-verify-code [POST]
func GetPasswordVerifyCode(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.GetVerifyCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	var resp *user.GetVerifyCodeResp
	resp, err = usecase.GetUsecase().GetPasswordVerifyCode(ctx, &req)
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// Register .
// @router /api/user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.RegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendErrResp(c, errno.New(errno.InvalidParam, "invalid param"), consts.StatusBadRequest)
		return
	}

	var resp *user.RegisterResp
	resp, err = usecase.GetUsecase().Register(ctx, &req)
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// Login .
// @router /api/user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.LoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendErrResp(c, errno.New(errno.InvalidParam, "invalid param"), consts.StatusBadRequest)
		return
	}

	var resp *user.LoginResp
	resp, err = usecase.GetUsecase().Login(ctx, &req)
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UserInfo .
// @router /api/user/info [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendErrResp(c, errno.New(errno.InvalidParam, "invalid param"), consts.StatusBadRequest)
		return
	}

	req.UserID = utils.Ptr(ctx.Value(constants.TokenKey).(int64))

	var resp *user.UserInfoResp
	resp, err = usecase.GetUsecase().UserInfo(ctx, &req)
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateAvatar .
// @router /api/user/change-avatar [POST]
func UpdateAvatar(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdateAvatarReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendErrResp(c, errno.New(errno.InvalidParam, "invalid param"), consts.StatusBadRequest)
		return
	}

	fh, err := c.FormFile("avatar")
	if err != nil {
		pack.SendErrResp(c, errno.New(errno.LackOFAvatarFile, "lack of avatar file"), consts.StatusBadRequest)
		return
	}
	f, _ := fh.Open()
	defer f.Close()

	buf, _ := io.ReadAll(f)
	req.AvatarData = buf
	req.AvatarName = utils.Ptr(fh.Filename)
	req.UserID = utils.Ptr(ctx.Value(constants.TokenKey).(int64))

	var resp *user.UpdateAvatarResp
	resp, err = usecase.GetUsecase().UpdateAvatar(ctx, &req)
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateName .
// @router /api/user/change-name [POST]
func UpdateName(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdateNameReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendErrResp(c, errno.New(errno.InvalidParam, "invalid param"), consts.StatusBadRequest)
		return
	}

	req.UserID = utils.Ptr(ctx.Value(constants.TokenKey).(int64))

	var resp *user.UpdateNameResp
	resp, err = usecase.GetUsecase().UpdateName(ctx, &req)
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdatePassword .
// @router /api/user/change-password [POST]
func UpdatePassword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdatePasswordReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendErrResp(c, errno.New(errno.InvalidParam, "invalid param"), consts.StatusBadRequest)
		return
	}

	var resp *user.UpdatePasswordResp
	resp, err = usecase.GetUsecase().UpdatePassword(ctx, &req)
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetUserAvatar .
// @router /api/user/get-avatar [GET]
func GetUserAvatar(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.GetUserAvatarReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.GetUserAvatarResp)
	resp.AvatarName = utils.Ptr("default.jpg")
	resp.AvatarUrl = utils.Ptr("http://localhost:8888/assets/avatar/default.jpg")

	resp.Base = pack.Base
	c.JSON(consts.StatusOK, resp)
}
